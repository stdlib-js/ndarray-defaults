// Copyright (c) 2023 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./mod.d.ts" />
var e="function"==typeof Object.defineProperty?Object.defineProperty:null;var t,n=Object.defineProperty,r=Object.prototype,o=r.toString,i=r.__defineGetter__,a=r.__defineSetter__,l=r.__lookupGetter__,_=r.__lookupSetter__;t=function(){try{return e({},"x",{}),!0}catch(e){return!1}}()?n:function(e,t,n){var p,d,g,f;if("object"!=typeof e||null===e||"[object Array]"===o.call(e))throw new TypeError("invalid argument. First argument must be an object. Value: `"+e+"`.");if("object"!=typeof n||null===n||"[object Array]"===o.call(n))throw new TypeError("invalid argument. Property descriptor must be an object. Value: `"+n+"`.");if((d="value"in n)&&(l.call(e,t)||_.call(e,t)?(p=e.__proto__,e.__proto__=r,delete e[t],e[t]=n.value,e.__proto__=p):e[t]=n.value),g="get"in n,f="set"in n,d&&(g||f))throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");return g&&i&&i.call(e,t,n.get),f&&a&&a.call(e,t,n.set),e};var p=t;function d(){return{dtypes:{default:"float64",floating_point:"float64",real_floating_point:"float64",complex_floating_point:"complex128",integral:"int32",signed_integer:"int32",unsigned_integer:"uint32"},order:"row-major",casting:"safe",index_mode:"throw"}}var g={dtypes:{default:"float64",floating_point:"float64",real_floating_point:"float64",complex_floating_point:"complex128",integral:"int32",signed_integer:"int32",unsigned_integer:"uint32"},order:"row-major",casting:"safe",index_mode:"throw"},f={"dtypes.default":g.dtypes.default,"dtypes.floating_point":g.dtypes.floating_point,"dtypes.real_floating_point":g.dtypes.real_floating_point,"dtypes.complex_floating_point":g.dtypes.complex_floating_point,"dtypes.integral":g.dtypes.integral,"dtypes.signed_integer":g.dtypes.signed_integer,"dtypes.unsigned_integer":g.dtypes.unsigned_integer,order:g.order,casting:g.casting,index_mode:g.index_mode};function u(e){var t=f[e];return void 0===t?null:t}p(d,"get",{configurable:!1,enumerable:!1,writable:!1,value:u});export{d as default,u as get};
//# sourceMappingURL=mod.js.map
